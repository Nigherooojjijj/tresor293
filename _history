{"entries":[{"timestamp":1743269864301,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":67,"start2":67,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"205\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})\n// Keypad-Pins definieren (4x4 Matrix Keypad)\nlet keypadZeilen = [Pin.P0, Pin.P1, Pin.P2, Pin.P3];\nlet keypadSpalten = [Pin.P4, Pin.P5, Pin.P6, Pin.P7];\n\n// OLED-Display initialisieren (über I2C, falls Erweiterung korrekt installiert ist)\nlet oled = OLED.createDisplay(128, 64);\n\n// Keypad-Matrix mit Zeichen\nlet keypadMatrix = [\n    [\"1\", \"2\", \"3\", \"A\"],\n    [\"4\", \"5\", \"6\", \"B\"],\n    [\"7\", \"8\", \"9\", \"C\"],\n    [\"*\", \"0\", \"#\", \"D\"]\n];\n\n// Funktion zur Erkennung der Tasteneingabe\nfunction leseKeypad() {\n    for (let row = 0; row < 4; row++) {\n        pins.digitalWritePin(keypadZeilen[row], 1);\n\n        for (let col = 0; col < 4; col++) {\n            if (pins.digitalReadPin(keypadSpalten[col]) == 1) {\n                pins.digitalWritePin(keypadZeilen[row], 0);\n                return keypadMatrix[row][col];\n            }\n        }\n\n        pins.digitalWritePin(keypadZeilen[row], 0);\n    }\n    return \"\";\n}\n\n// Hauptprogramm: Tasten anzeigen\nbasic.forever(function () {\n    let taste = leseKeypad();\n    if (taste != \"\") {\n        oled.clear();\n        oled.showString(taste, 1, 1);\n    }\n});"],[1,"\n"]],"start1":0,"start2":0,"length1":1131,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"v3\": \"*\",\n        \"oled\": \"github:pythom1234/pxt-oled#v2.3.3\""],[0,"\n   "]],"start1":87,"start2":87,"length1":80,"length2":8},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":184,"start2":184,"length1":32,"length2":31}]}]},{"timestamp":1743270462863,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"basic.forever(function () {\n\t\n})\n// Keypad-Pins definieren (4x4 Matrix Keypad)\nlet keypadZeilen = [Pin.P0, Pin.P1, Pin.P2, Pin.P3];\nlet keypadSpalten = [Pin.P4, Pin.P5, Pin.P6, Pin.P7];\n\n// OLED-Display initialisieren (über I2C, falls Erweiterung korrekt installiert ist)\nlet oled = OLED.createDisplay(128, 64);\n\n// Keypad-Matrix mit Zeichen\nlet keypadMatrix = [\n    [\"1\", \"2\", \"3\", \"A\"],\n    [\"4\", \"5\", \"6\", \"B\"],\n    [\"7\", \"8\", \"9\", \"C\"],\n    [\"*\", \"0\", \"#\", \"D\"]\n];\n\n// Funktion zur Erkennung der Tasteneingabe\nfunction leseKeypad() {\n    for (let row = 0; row < 4; row++) {\n        pins.digitalWritePin(keypadZeilen[row], 1);\n\n        for (let col = 0; col < 4; col++) {\n            if (pins.digitalReadPin(keypadSpalten[col]) == 1) {\n                pins.digitalWritePin(keypadZeilen[row], 0);\n                return keypadMatrix[row][col];\n            }\n        }\n\n        pins.digitalWritePin(keypadZeilen[row], 0);\n    }\n    return \"\";\n}\n\n// Hauptprogramm: Tasten anzeigen\nbasic.forever(function () {\n    let taste = leseKeypad();\n    if (taste != \"\") {\n        oled.clear();\n        oled.showString(taste, 1, 1);\n    }\n});"]],"start1":0,"start2":0,"length1":0,"length2":1131}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"les\": [\n"],[1,"        \"main.blocks\",\n"],[0,"        "]],"start1":178,"start2":178,"length1":16,"length2":39}]},{"type":"removed","filename":"main.blocks","value":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>"}]},{"timestamp":1743271769910,"editorVersion":"7.0.3","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":228,"start2":228,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// Hier kann man Tests durchführen; diese Datei wird nicht kompiliert, wenn dieses Paket als Erweiterung verwendet wird.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1743269864300,"editorVersion":"7.0.3","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Tresor293\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1743271769910,"editorVersion":"7.0.3","text":{"main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"Tresor293\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"v3\": \"*\",\n        \"oled\": \"github:pythom1234/pxt-oled#v2.3.3\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1743271769922}